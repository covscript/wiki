= 参考文档：语法 =

'''说明'''

本文档格式为：正文内容 是代码或正文，''斜体内容'' 是说明，'''加粗内容'''
是解释

'''<<Anchor(A2.1)>> 2.1 语句（statement）'''

''语句''

'''以换行符结束的一行代码称为语句'''

''语句1'' ; ''语句2'' ; ''语句3''

'''任意语句都可以将分号作为终结符'''

单独一行语句也可以使用分号作为结尾

'''<<Anchor(A2.2)>> 2.2 预处理（preprocessor）'''

''语句'' # ''注释''

'''任意#之后的内容均视为注释'''

@begin

  ''语句''

@end

'''在 @begin 和 @end 之间的代码将视为一行语句'''

也就是说， @begin 和 @end 之间的所有换行符都将会被忽略

@charset: ''字符集''

'''指定程序的编码，可以是：'''

|| '''编码'''          || '''字符集''' ||
|| ASCII纯文本   || ascii  ||
|| UTF-8简体中文 || utf-8  ||
|| GBK简体中文   || gbk    ||

当选择Unicode中文编码(UTF-8/GBK)时，'''可以使用简体中文作为标识符'''

'''<<Anchor(A2.3)>> 2.3 关键字（keyword）'''

Covariant Script的关键字分为两种：

一种为'''强制型关键字'''，即编译器遇到这个词即视为使用这个语法标识符；

一种为'''标识型关键字'''，即仅在符合语法时编译器才会将其视为语法标识符

强制型关键字表

|| '''关键字''' || '''and'''        || '''or'''         || '''not'''     || '''typeid'''   || '''new'''        ||
|| 含义   || 与运算符   || 或运算符   || 非运算符 || 类型信息 || 新建栈对象 ||
|| null   || local      || global     || true     || false    || gcnew      ||
|| 空指针 || 本地作用域 || 全局作用域 || 逻辑真   || 逻辑假   || 新建堆对象 ||

标识型关键字表(190501)

|| '''import'''     || '''as'''             || '''package'''      || '''namespace'''    || '''using'''      || '''struct'''     || '''class''' || '''extends''' ||
||<-2> 引入包     || 包定义         || 声明名称空间 || 引入名称空间 ||<-2> 声明结构体 || 继承结构体 ||
|| block      || var            || constant     || if           || else       || switch     || case  || default ||
|| 声明语句块 || 声明变量       || 声明常量     ||<:-5> 分支语句     ||
|| end        || while          || loop         || until        || for        || foreach    || in    || do      ||
|| 结束语句块 ||<:-7> 循环语句       ||
|| break      || continue       || function     || override     || return     || try        || catch || throw   ||
|| 跳出循环   || 进入下一轮循环 || 声明函数     || 覆写函数     || 返回语句   ||<-3> 异常处理   ||

'''注意，在190501前的标准中，标识性关键字也属于强制型关键字的一部分'''

'''<<Anchor(A2.4)>> 2.4 模块（module）'''

import ''Package名, Package名...''

'''引入一个或多个Package'''

import ''Package名[(.名称空间名)...]'' as ''Package别名''

'''引入一个Package或Package内的名称空间，并设置别名'''

引入的Package可以是 *.csp 文件(CovScript包)或者是 *.cse
文件(CovScript扩展)

当两者同时存在时会优先引入 *.csp 文件(CovScript包)

package ''Package名''

'''声明一个Package'''

原则上包名应和文件名相同

'''<<Anchor(A2.5)>> 2.5 变量（variable）'''

'''<<Anchor(A2.5.1)>> 2.5.1 定义'''

var ''变量名 = 表达式, 变量名 = 表达式...''

'''定义一个或多个变量，初始值为表达式的值'''

constant ''常量名 = 表达式, 常量名 = 表达式...''

'''[慎用] 定义一个或多个常量，其值为表达式的值'''

常量和变量的处理方式完全不同，常量类似于 C++中的
constexpr，其实际上'''仅存在于编译期'''。使用常量将有利于提高性能，编译器在某些情况下也会自动进行常量折叠，但显式声明将帮助编译器更进一步优化您的程序

请'''尽量谨慎使用常量'''，复杂常量的行为取决于实现

'''<<Anchor(A2.5.2)>> 2.5.2 在栈上新建对象'''

new ''类型''

'''在栈上新建一个指定类型的对象'''

此对象将会遵从RAII原则自动回收

'''<<Anchor(A2.5.3)>> 2.5.3 在堆上新建对象'''

gcnew ''类型''

'''在堆上新建一个指定类型的对象，并返回指向这个对象的指针'''

此对象将会由垃圾回收器自动回收

'''<<Anchor(A2.6)>> 2.6 表达式（expression）'''

'''<<Anchor(A2.6.1)>> 2.6.1 定义'''

表达式由操作数和运算符组成

''操作数 运算符 操作数''

一般有左右两个操作数的运算符是二元运算符

只有一个操作数的运算符是一元运算符

二元运算符有结合律，左结合是从右向左运算，右结合是从左向右运算

所有的运算符都有优先级，优先级越高越先计算

'''注意，对于递增、递减、赋值等会修改操作数的运算符，要求表达式的计算结果可被修改，不能是表达式计算中产生的中间临时量或常量'''

'''<<Anchor(A2.6.2)>> 2.6.2 一元运算符'''

|| '''运算符'''          || '''优先级''' || '''功能'''                                     ||
|| - ''表达式''     || 10     || 对数值进行数学取反运算                   ||
|| * ''表达式''     || 11     || 对指针进行解引用                         ||
|| typeid ''表达式'' || 14     || 获取表达式的运行时类型信息               ||
|| new ''表达式''    || 14     || 新建表达式表示的类型的对象               ||
|| gcnew ''表达式''  || 14     || 新建表达式表示的类型的内存区块           ||
|| ! ''表达式''      || 8      || 对表达式进行非运算                       ||
|| ++ ''表达式''     || 13     || 对表达式进行递增运算                     ||
|| ''表达式'' ++     || 13     || 对表达式进行递增运算并保留表达式原先的值 ||
|| -- ''表达式''     || 13     || 对表达式进行递减运算                     ||
|| ''表达式'' --     || 13     || 对表达式进行递减运算并保留表达式原先的值 ||

'''<<Anchor(A2.6.3)>> 2.6.3 二元运算符'''

'''<<Anchor(A2.6.3.1)>> 2.6.3.1 右结合运算符'''

|| '''运算符'''                  || '''优先级''' || '''结合律''' || '''功能'''                                         ||
|| ''表达式'' + ''表达式''     || 10     || 右     || 对数值进行数学加法运算或拼接字符串           ||
|| ''表达式'' - ''表达式''     || 10     || 右     || 对数值进行数学减法运算                       ||
|| ''表达式'' * ''表达式''    || 11     || 右     || 对数值进行数学乘法运算                       ||
|| ''表达式'' / ''表达式''     || 11     || 右     || 对数值进行数学除法运算                       ||
|| ''表达式'' % ''表达式''     || 12     || 右     || 对数值进行数学取余运算                       ||
|| ''表达式'' ^ ''表达式''     || 12     || 右     || 对数值进行数学幂运算                         ||
|| ''表达式'' . ''表达式''     || 15     || 右     || 对各种对象进行访问                           ||
|| ''表达式'' -> ''表达式'' || 15     || 右     || 对指针指向的各种对象进行访问                 ||
|| ''表达式'' < ''表达式''  || 9      || 右     || 比较左侧数值是否小于右侧                     ||
|| ''表达式'' > ''表达式''  || 9      || 右     || 比较左侧数值是否大于右侧                     ||
|| ''表达式'' <= ''表达式'' || 9      || 右     || 比较左侧数值是否小于或等于右侧               ||
|| ''表达式'' >= ''表达式'' || 9      || 右     || 比较左侧数值是否大于或等于右侧               ||
|| ''表达式'' == ''表达式''    || 9      || 右     || 比较两侧表达式的值是否相等                   ||
|| ''表达式'' != ''表达式''    || 9      || 右     || 比较两侧表达式的值是否不相等                 ||
|| ''表达式'' && ''表达式''    ||<|2> 7      ||<|2> 右     ||<|2> 对两侧表达式进行与运算，若左侧为假则停止求值 ||
|| ''表达式'' and''表达式''    ||
|| ''表达式'' \\ ''表达式''  ||<|2> 6      ||<|2> 右     ||<|2> 对两侧表达式进行或运算，若左侧为真则停止求值 ||
|| ''表达式'' or ''表达式''    ||

'''<<Anchor(A2.6.3.2)>> 2.6.3.2 左结合运算符'''

|| '''运算符'''                || '''优先级''' || '''结合律''' || '''功能'''                                                       ||
|| ''表达式'' = ''表达式''   || 1      || 左     || 将右侧表达式的值赋予左边                                   ||
|| ''表达式'' += ''表达式''  || 1      || 左     || 对数值进行数学加法运算或对字符串进行拼接后再将其值赋予左边 ||
|| ''表达式'' -= ''表达式''  || 1      || 左     || 对数值进行数学减法运算后再赋予左边                         ||
|| ''表达式'' *= ''表达式'' || 1      || 左     || 对数值进行数学乘法运算后再赋予左边                         ||
|| ''表达式'' /= ''表达式''  || 1      || 左     || 对数值进行数学除法运算后再赋予左边                         ||
|| ''表达式'' %= ''表达式''  || 1      || 左     || 对数值进行数学取余运算后再赋予左边                         ||
|| ''表达式'' ^= ''表达式''  || 1      || 左     || 对数值进行数学幂运算后再赋予左边                           ||

'''<<Anchor(A2.6.3.3)>> 2.6.3.3 特殊运算符'''

|| '''运算符'''               || '''优先级''' || '''结合律''' || '''功能'''                               ||
|| ''表达式'', ''表达式''   || 0      || 右     || 联接多个表达式并依次运算           ||
|| ''表达式'' : ''表达式''  || 4      || 右     || 建立左侧表达式的值到右侧的映射     ||
|| ''表达式''(''参数列表'') || 15     || 右     || 调用表达式表示的函数               ||
|| ''表达式''[''表达式''] || 15     || 右     || 访问数组、哈希表或是字符串中的元素 ||
|| ''表达式''...          || 20     || 无     || 若表达式的值为数组，则将其展开     ||
|| (''表达式'')           || 无     || 无     || 创建子表达式                       ||

逗号表达式将遵循从左到右的规则，其值为最后一个表达式的值

数组在访问时，若下标越界会自动增长，增长的部分填0；若下标为负则访问下标为长度-下标绝对值的元素，哈希表在访问时若映射不存在则将自动建立到0的映射

展开表达式的使用范围'''仅限'''函数调用时的参数列表和数组字面量的声明中

小括号扩起的子表达式将看作以一个整体进行求值

'''<<Anchor(A2.6.4)>> 2.6.4 条件表达式'''

''逻辑表达式'' ? ''表达式1'' : ''表达式2''

逻辑表达式的值为真时整个表达式的值为表达式1

逻辑表达式的值为假时整个表达式的值为表达式2

'''<<Anchor(A2.6.5)>> 2.6.5 结构化绑定'''

(''表达式1'', ''表达式2''...) = ''表达式3''

结构化绑定(Structured
Binding)指的是将数组中的值按位置绑定至小括号括起的逗号表达式列表中，如：
(a, b) = {1, 2}

我们将结构化绑定中等号左侧的小括号括起的逗号表达式列表称为结构化绑定列表

'''在结构化绑定中要求表达式3(等号右侧)的计算结果必须为数组'''

结构化绑定也可以嵌套，但要求嵌套的结构化绑定中对应位置的数组必须也是嵌套的，如：
(a, (b, c)) = {1, {2, 3}}

结构化绑定也可以用于变量和常量的声明，但结构化绑定列表中的元素必须为变量名或嵌套的结构化绑定列表，如：

var (a, (b, c)) = test(....)

constant (d, (e, f)) = {4, {5, 6}}

'''如果是常量的声明，则被绑定的数组必须为常量'''

'''<<Anchor(A2.7)>> 2.7 作用域和名称空间（domain & namespace）'''

'''<<Anchor(A2.7.1)>> 2.7.1 定义'''

block

  ''语句块''

end

'''定义一个临时作用域'''

临时作用域中的变量会在离开作用域后销毁

namespace ''名称空间名''

  ''语句块''

end

'''定义一个名称空间'''

名称空间中只允许引入其他名称空间，变量定义，函数定义，类型定义以及名称空间定义

using ''名称空间名''

引入一个名称空间，这将会在当前作用域中建立引入的名称空间中所有变量的引用

'''<<Anchor(A2.7.2)>> 2.7.2 名称查找'''

''变量名''

'''从最上层作用域开始向下查找变量'''

local.''变量名''

'''查找当前作用域中的变量'''

global.''变量名''

'''查找全局作用域中的变量'''

''名称空间名''.''变量名''

'''查找名称空间中的变量'''

''变量名''.''变量名''

'''查找结构体或扩展中的变量'''

作用域结构以及变量查找方式如图所示【缺图】

注意，对于最后一种访问方法,仅变量类型为结构或支持扩展的类型时可用，如访问的是扩展或结构中的函数，将会把点运算符左边的变量作为函数的第一个参数传入

也就是说: char.isspace(ch) 等价于 ch.isspace()

除此之外，支持扩展的类型将自动调用无参数的成员访问函数

也就是说: string.size(str) 等价于 str.size
